swagger: '2.0'
info:
  version: "1.0.1"
  title: temperatureSensorAPI
  description: A simple API for getting and updating the temperature of a sensor
schemes:
 - https
basePath: /dev
securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    in: header
    name: X-API-KEY
security:
  - ApiKeyAuth: []
consumes:
  - application/json
produces:
  - application/json
paths:
  /temperatureSensor:
    post:
      description: Adds a new temperature sensor 
      parameters:
        - name: area
          in: body
          description: Name of area where temperature sensor is located (e.g. Main Floor)
          required: true
          schema:
            type: object
            properties:
              area:
                type: string
      responses:
        200:
          description: temperatureSensor device state with uuid
          schema:
            $ref: '#/definitions/State'
        400:
          $ref: '#/responses/Error'
      x-lambda-function: state
    get:
      description: Gives list of temperature sensors
      responses:
        200:
          description: temperature sensors
          schema:
            type: array
            items:
              $ref: '#/definitions/State'
      x-lambda-function: state
        
  '/temperatureSensor/{uuid}':
    get:
      description: Gets the state of a temperature sensor 
      parameters: 
        - $ref: '#/parameters/UUID'
      responses:
        200:
          description: temperature sensor state
          schema:
            $ref: '#/definitions/State'
        400:
          $ref: '#/responses/Error'
      x-lambda-function: state

    put:
      description: Updates the state of a temperature sensor 
      parameters: 
        - $ref: '#/parameters/UUID'
        - name: state
          in: body
          description: temperature sensor state
          schema:
            $ref: '#/definitions/State'
      responses:
        200:
          description: Successfully updated temperature sensor 
        400:
          $ref: '#/responses/Error'
      x-lambda-function: state
    delete:
      description: Delete a temperature sensor by id
      parameters:
          - $ref: '#/parameters/UUID'
      responses:
        200:
          description: Successfully deleted temperature sensor 
        400:
          $ref: '#/responses/Error'
      x-lambda-function: state
        
definitions:
  State:
    description: temperature sensor state
    type: object
    properties:
      uuid:
        type: string
      area:
        type: string
      temperature:
        type: integer
      temperature_scale:
        type: string
      update_period:
        type: integer          

parameters:
  UUID:
    name: uuid
    in: path
    type: string
    required: true
    description: Id of temperatureSensor

responses:
  Error:
    description: Invalid request error
    schema:
      type: object
      properties:
        message:
          type: string
          
x-lambda-functions:
  state:
    runtime: python3.6
    handler: state.lambda_handler
    memory: 128
    path_to_code: ./
  
    